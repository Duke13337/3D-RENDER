import sys
import ctypes
import random
import math
from PyQt6 import QtWidgets, QtCore, QtGui

# –ó–∞–≥—Ä—É–∑–∫–∞ DLL
renderer3d = ctypes.CDLL("./renderer3d.dll")

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π (—Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Ç–µ–∫—É—â–µ–π DLL)
renderer3d.InitRenderer3D.argtypes = [ctypes.c_int, ctypes.c_int]
renderer3d.RenderFrame.restype = None
renderer3d.AddCube.argtypes = [ctypes.c_float, ctypes.c_float, ctypes.c_float, ctypes.c_float]

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
available_functions = []
functions_to_check = [
    "CloseRenderer3D", "IsRunning", "RotateCamera", "MoveCamera", "ZoomCamera",
    "ClearScene", "ResetCamera", "GetObjectCount", "SetBackgroundColor"
]

for func_name in functions_to_check:
    try:
        func = getattr(renderer3d, func_name)
        available_functions.append(func_name)
    except AttributeError:
        pass

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
has_camera_controls = "RotateCamera" in available_functions
has_move_camera = "MoveCamera" in available_functions
has_zoom_camera = "ZoomCamera" in available_functions
has_clear_scene = "ClearScene" in available_functions
has_reset_camera = "ResetCamera" in available_functions
has_object_count = "GetObjectCount" in available_functions
has_background_color = "SetBackgroundColor" in available_functions

# –û–±—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
has_extended_functions = has_background_color and has_object_count and has_reset_camera

print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π: {len(available_functions)}")
print(f"üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–º–µ—Ä–æ–π: {'‚úÖ' if has_camera_controls else '‚ùå'}")
print(f"üîß –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: {'‚úÖ' if has_extended_functions else '‚ùå'}")
print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: {', '.join(available_functions)}")

if "RotateCamera" in available_functions:
    renderer3d.RotateCamera.argtypes = [ctypes.c_float, ctypes.c_float]

if "MoveCamera" in available_functions:
    renderer3d.MoveCamera.argtypes = [ctypes.c_float, ctypes.c_float]

if "ZoomCamera" in available_functions:
    renderer3d.ZoomCamera.argtypes = [ctypes.c_float]

if "ClearScene" in available_functions:
    renderer3d.ClearScene.argtypes = []

if "IsRunning" in available_functions:
    renderer3d.IsRunning.restype = ctypes.c_bool

if "CloseRenderer3D" in available_functions:
    renderer3d.CloseRenderer3D.restype = None

if "GetObjectCount" in available_functions:
    renderer3d.GetObjectCount.restype = ctypes.c_int

if "SetBackgroundColor" in available_functions:
    renderer3d.SetBackgroundColor.argtypes = [ctypes.c_float, ctypes.c_float, ctypes.c_float]

class SDLWidget(QtWidgets.QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setAttribute(QtCore.Qt.WidgetAttribute.WA_NativeWindow)
        self.setAttribute(QtCore.Qt.WidgetAttribute.WA_PaintOnScreen)
        self.setAttribute(QtCore.Qt.WidgetAttribute.WA_NoSystemBackground)

        self.timer = QtCore.QTimer()
        self.timer.timeout.connect(self.update_frame)
        self.timer.start(16)  # ~60 FPS
        
        self.object_count = 0  # –õ–æ–∫–∞–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫
        self.is_initialized = False  # –§–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        
        # –£–ë–ò–†–ê–ï–ú –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º—ã—à—å—é - —Ç–µ–ø–µ—Ä—å DLL —Å–∞–º –≤—Å—ë –¥–µ–ª–∞–µ—Ç!
        # self.left_mouse_pressed = False    
        # self.middle_mouse_pressed = False  
        # self.last_mouse_pos = None
        self.setMouseTracking(True)  # –í–∫–ª—é—á–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º—ã—à–∏ –¥–ª—è DLL
        self.setFocusPolicy(QtCore.Qt.FocusPolicy.StrongFocus)
        
        # –î–µ–ª–∞–µ–º –≤–∏–¥–∂–µ—Ç —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—ã–º
        self.setAcceptDrops(False)

    def resizeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –≤–∏–¥–∂–µ—Ç–∞"""
        super().resizeEvent(event)
        
        # –ü—Ä–æ—Å—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ: –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –≤–µ—Å—å —Ä–µ–Ω–¥–µ—Ä–µ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–∏–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è —Ä–∞–∑–º–µ—Ä
        if self.is_initialized:
            old_size = event.oldSize()
            new_size = event.size()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫—Ä–∏—Ç–∏—á–Ω–æ–µ
            if (abs(new_size.width() - old_size.width()) > 100 or 
                abs(new_size.height() - old_size.height()) > 100):
                
                try:
                    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
                    self.timer.stop()
                    
                    # –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–Ω–¥–µ—Ä–µ—Ä
                    renderer3d.InitRenderer3D(new_size.width(), new_size.height())
                    renderer3d.AddCube(0.0, 0.0, -10.0, 1.0)
                    
                    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
                    self.timer.start(16)
                    
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞: {e}")
                    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏

    def enterEvent(self, event):
        """–ü–æ–ª—É—á–∞–µ–º —Ñ–æ–∫—É—Å –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –º—ã—à–∏"""
        self.setFocus()
        super().enterEvent(event)

    def leaveEvent(self, event):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ —É—Ö–æ–¥–µ –º—ã—à–∏"""
        # DLL —Å–∞–º —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∫–Ω–æ–ø–æ–∫ –º—ã—à–∏
        pass

    def showEvent(self, event):
        if not self.is_initialized:
            size = self.size()
            renderer3d.InitRenderer3D(size.width(), size.height())
            
            # –î–æ–±–∞–≤–∏–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ü–µ–Ω—É - –æ—Ç–æ–¥–≤–∏–≥–∞–µ–º –∫—É–± –¥–∞–ª—å—à–µ –æ—Ç –∫–∞–º–µ—Ä—ã
            try:
                renderer3d.AddCube(0.0, 0.0, -10.0, 1.0)
                self.object_count += 1
                print(f"‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–π –∫—É–± –¥–æ–±–∞–≤–ª–µ–Ω! –ü–æ–∑–∏—Ü–∏—è: (0, 0, -10), —Ä–∞–∑–º–µ—Ä: 1.0")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∫—É–±–∞: {e}")
            
            self.is_initialized = True

    def mousePressEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –º—ã—à–∏ - –û–¢–ö–õ–Æ–ß–ï–ù–ê, —Ç–∞–∫ –∫–∞–∫ DLL —Å–∞–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º—ã—à—å"""
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ —ç—Ç–æ—Ç –≤–∏–¥–∂–µ—Ç –¥–ª—è –∫–æ–ª–µ—Å–∏–∫–∞ –º—ã—à–∏
        self.setFocus()
        # –ë–æ–ª—å—à–µ –ù–ï –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º—ã—à—å –≤ Python - –ø—É—Å—Ç—å DLL –¥–µ–ª–∞–µ—Ç –≤—Å—ë —Å–∞–º!

    def mouseMoveEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏ - –û–¢–ö–õ–Æ–ß–ï–ù–ê, —Ç–∞–∫ –∫–∞–∫ DLL —Å–∞–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º—ã—à—å"""
        # –í–ê–ñ–ù–û: –ù–ï –≤—ã–∑—ã–≤–∞–µ–º RotateCamera –∏–∑ Python!
        # DLL —Ç–µ–ø–µ—Ä—å —Å–∞–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç SDL —Å–æ–±—ã—Ç–∏—è –º—ã—à–∏ –≤ handleCameraInput()
        pass

    def mouseReleaseEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –º—ã—à–∏ - –û–¢–ö–õ–Æ–ß–ï–ù–ê, —Ç–∞–∫ –∫–∞–∫ DLL —Å–∞–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º—ã—à—å"""
        # DLL —Å–∞–º —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∫–Ω–æ–ø–æ–∫ –º—ã—à–∏
        pass

    def wheelEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–µ—Å–∏–∫–∞ –º—ã—à–∏ –¥–ª—è –∑—É–º–∞"""
        if has_zoom_camera:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
                delta = event.angleDelta().y()
                # –ò–ù–í–ï–†–¢–ò–†–û–í–ê–ù–ù–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø: DLL —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–æ–±–æ—Ä–æ—Ç
                # –°–∫—Ä–æ–ª–ª –≤–≤–µ—Ä—Ö (delta > 0) = –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ = –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π zoom_factor
                zoom_factor = -0.3 if delta > 0 else 0.3
                renderer3d.ZoomCamera(zoom_factor)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑—É–º–∞: {e}")

    def update_frame(self):
        try:
            if "IsRunning" in available_functions and not renderer3d.IsRunning():
                self.timer.stop()
                if "CloseRenderer3D" in available_functions:
                    renderer3d.CloseRenderer3D()
                QtWidgets.QApplication.quit()
            else:
                renderer3d.RenderFrame()
        except:
            # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–µ–Ω–¥–µ—Ä–∏—Ç—å
            try:
                renderer3d.RenderFrame()
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞

    def paintEngine(self):
        return None

class MainControlPanel(QtWidgets.QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.object_count = 1
        self.init_ui()
        
    def init_ui(self):
        # –û—Å–Ω–æ–≤–Ω–æ–π layout –Ω–∞ –≤—Å—ë –æ–∫–Ω–æ
        main_layout = QtWidgets.QHBoxLayout(self)
        main_layout.setSpacing(20)
        main_layout.setContentsMargins(20, 20, 20, 20)
        
        # === 3D –û–ë–õ–ê–°–¢–¨ –°–õ–ï–í–ê ===
        left_panel = QtWidgets.QWidget()
        left_layout = QtWidgets.QVBoxLayout(left_panel)
        left_layout.setContentsMargins(0, 0, 0, 0)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞–¥ 3D –æ–±–ª–∞—Å—Ç—å—é
        title = QtWidgets.QLabel("üéÆ 3D –†–µ–Ω–¥–µ—Ä–µ—Ä")
        title.setStyleSheet("""
            QLabel {
                font-size: 24px; 
                font-weight: bold; 
                color: #2c3e50;
                padding: 15px;
                background-color: #ecf0f1;
                border-radius: 8px;
                border: 2px solid #bdc3c7;
            }
        """)
        title.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        left_layout.addWidget(title)
        
        # 3D –≤–∏–¥–∂–µ—Ç
        self.sdl_widget = SDLWidget()
        self.sdl_widget.setMinimumSize(800, 600)
        self.sdl_widget.setStyleSheet("""
            QWidget {
                border: 2px solid #34495e;
                border-radius: 8px;
                background-color: #000000;
            }
        """)
        left_layout.addWidget(self.sdl_widget)
        
        main_layout.addWidget(left_panel, 3)
        
        # === –ü–ê–ù–ï–õ–¨ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –°–ü–†–ê–í–ê ===
        right_panel = QtWidgets.QWidget()
        right_panel.setFixedWidth(350)
        right_layout = QtWidgets.QVBoxLayout(right_panel)
        right_layout.setSpacing(20)
        right_layout.setContentsMargins(0, 0, 0, 0)
        
        # === –°–ß–ï–¢–ß–ò–ö –û–ë–™–ï–ö–¢–û–í ===
        self.object_count_label = QtWidgets.QLabel("–û–±—ä–µ–∫—Ç–æ–≤ –≤ —Å—Ü–µ–Ω–µ: 1")
        self.object_count_label.setStyleSheet("""
            QLabel {
                font-size: 16px;
                font-weight: bold;
                color: white;
                background-color: #3498db;
                padding: 12px;
                border-radius: 6px;
                text-align: center;
            }
        """)
        self.object_count_label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        right_layout.addWidget(self.object_count_label)
        
        # === –ö–ù–û–ü–ö–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø ===
        buttons_group = QtWidgets.QGroupBox("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞–º–∏")
        buttons_layout = QtWidgets.QVBoxLayout(buttons_group)
        buttons_layout.setSpacing(10)
        
        # –ö–Ω–æ–ø–∫–∏ –≤ —Å–µ—Ç–∫–µ 2x2
        buttons_grid = QtWidgets.QGridLayout()
        buttons_grid.setSpacing(10)
        
        btn_cube = QtWidgets.QPushButton("üì¶ –î–æ–±–∞–≤–∏—Ç—å –∫—É–±")
        btn_cube.clicked.connect(self.add_cube)
        btn_cube.setStyleSheet(self.get_clean_button_style("#e74c3c"))
        buttons_grid.addWidget(btn_cube, 0, 0)
        
        btn_random_cube = QtWidgets.QPushButton("üé≤ –°–ª—É—á–∞–π–Ω—ã–π –∫—É–±")
        btn_random_cube.clicked.connect(self.add_random_cube)
        btn_random_cube.setStyleSheet(self.get_clean_button_style("#f39c12"))
        buttons_grid.addWidget(btn_random_cube, 0, 1)
        
        btn_cube_line = QtWidgets.QPushButton("üìè –õ–∏–Ω–∏—è –∫—É–±–æ–≤")
        btn_cube_line.clicked.connect(self.add_cube_line)
        btn_cube_line.setStyleSheet(self.get_clean_button_style("#9b59b6"))
        buttons_grid.addWidget(btn_cube_line, 1, 0)
        
        btn_cube_circle = QtWidgets.QPushButton("üîµ –ö—Ä—É–≥ –∫—É–±–æ–≤")
        btn_cube_circle.clicked.connect(self.add_cube_circle)
        btn_cube_circle.setStyleSheet(self.get_clean_button_style("#1abc9c"))
        buttons_grid.addWidget(btn_cube_circle, 1, 1)
        
        btn_demo_scene = QtWidgets.QPushButton("‚ú® –î–µ–º–æ —Å—Ü–µ–Ω–∞")
        btn_demo_scene.clicked.connect(self.create_demo_scene)
        btn_demo_scene.setStyleSheet(self.get_clean_button_style("#27ae60"))
        buttons_grid.addWidget(btn_demo_scene, 2, 0)
        
        btn_clear = QtWidgets.QPushButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë")
        btn_clear.clicked.connect(self.clear_scene)
        btn_clear.setStyleSheet(self.get_clean_button_style("#e67e22"))
        buttons_grid.addWidget(btn_clear, 2, 1)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ –∫–∞–º–µ—Ä—ã (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
        if has_reset_camera:
            btn_reset_camera = QtWidgets.QPushButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∫–∞–º–µ—Ä—É")
            btn_reset_camera.clicked.connect(self.reset_camera)
            btn_reset_camera.setStyleSheet(self.get_clean_button_style("#3498db"))
            buttons_grid.addWidget(btn_reset_camera, 3, 0, 1, 2)  # –ù–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É
        
        # –°–ï–ö–†–ï–¢–ù–ê–Ø –ö–ù–û–ü–ö–ê –ö–ê–ó–ò–ù–û
        btn_secret_casino = QtWidgets.QPushButton("üé∞ –°–µ–∫—Ä–µ—Ç–Ω–æ–µ –∫–∞–∑–∏–Ω–æ")
        btn_secret_casino.clicked.connect(self.open_casino)
        btn_secret_casino.setStyleSheet(self.get_clean_button_style("#8e44ad"))
        buttons_grid.addWidget(btn_secret_casino, 4, 0, 1, 2)  # –ù–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É
        
        buttons_layout.addLayout(buttons_grid)
        right_layout.addWidget(buttons_group)
        
        # === –ù–ê–°–¢–†–û–ô–ö–ò ===
        settings_group = QtWidgets.QGroupBox("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—ä–µ–∫—Ç–æ–≤")
        settings_layout = QtWidgets.QFormLayout(settings_group)
        settings_layout.setSpacing(10)
        
        # –†–∞–∑–º–µ—Ä
        self.size_slider = QtWidgets.QSlider(QtCore.Qt.Orientation.Horizontal)
        self.size_slider.setRange(10, 300)
        self.size_slider.setValue(100)
        self.size_label = QtWidgets.QLabel("1.0")
        self.size_slider.valueChanged.connect(lambda v: self.size_label.setText(f"{v/100:.1f}"))
        
        size_layout = QtWidgets.QHBoxLayout()
        size_layout.addWidget(self.size_slider)
        size_layout.addWidget(self.size_label)
        settings_layout.addRow("–†–∞–∑–º–µ—Ä:", size_layout)
        
        # –ü–æ–∑–∏—Ü–∏—è X
        self.pos_x_slider = QtWidgets.QSlider(QtCore.Qt.Orientation.Horizontal)
        self.pos_x_slider.setRange(-500, 500)
        self.pos_x_slider.setValue(0)
        self.pos_x_label = QtWidgets.QLabel("0.0")
        self.pos_x_slider.valueChanged.connect(lambda v: self.pos_x_label.setText(f"{v/100:.1f}"))
        
        pos_x_layout = QtWidgets.QHBoxLayout()
        pos_x_layout.addWidget(self.pos_x_slider)
        pos_x_layout.addWidget(self.pos_x_label)
        settings_layout.addRow("–ü–æ–∑–∏—Ü–∏—è X:", pos_x_layout)
        
        # –ü–æ–∑–∏—Ü–∏—è Y
        self.pos_y_slider = QtWidgets.QSlider(QtCore.Qt.Orientation.Horizontal)
        self.pos_y_slider.setRange(-500, 500)
        self.pos_y_slider.setValue(0)
        self.pos_y_label = QtWidgets.QLabel("0.0")
        self.pos_y_slider.valueChanged.connect(lambda v: self.pos_y_label.setText(f"{v/100:.1f}"))
        
        pos_y_layout = QtWidgets.QHBoxLayout()
        pos_y_layout.addWidget(self.pos_y_slider)
        pos_y_layout.addWidget(self.pos_y_label)
        settings_layout.addRow("–ü–æ–∑–∏—Ü–∏—è Y:", pos_y_layout)
        
        # –ü–æ–∑–∏—Ü–∏—è Z
        self.pos_z_slider = QtWidgets.QSlider(QtCore.Qt.Orientation.Horizontal)
        self.pos_z_slider.setRange(-2000, -200)
        self.pos_z_slider.setValue(-1000)
        self.pos_z_label = QtWidgets.QLabel("-10.0")
        self.pos_z_slider.valueChanged.connect(lambda v: self.pos_z_label.setText(f"{v/100:.1f}"))
        
        pos_z_layout = QtWidgets.QHBoxLayout()
        pos_z_layout.addWidget(self.pos_z_slider)
        pos_z_layout.addWidget(self.pos_z_label)
        settings_layout.addRow("–ü–æ–∑–∏—Ü–∏—è Z:", pos_z_layout)
        
        right_layout.addWidget(settings_group)
        
        # === –ò–ù–§–û–†–ú–ê–¶–ò–Ø ===
        info_group = QtWidgets.QGroupBox("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        info_layout = QtWidgets.QVBoxLayout(info_group)
        
        info_text = QtWidgets.QLabel(
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—ã—à—å—é –≤ 3D –æ–±–ª–∞—Å—Ç–∏:\n\n"
            "‚Ä¢ –õ–ö–ú + –¥–≤–∏–∂–µ–Ω–∏–µ = –æ—Ä–±–∏—Ç–∞–ª—å–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã\n"
            "‚Ä¢ –°–ö–ú + –¥–≤–∏–∂–µ–Ω–∏–µ = –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞ –æ–±–∑–æ—Ä–∞)\n"
            "‚Ä¢ –ö–æ–ª–µ—Å–æ –º—ã—à–∏ = –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ/–æ—Ç–¥–∞–ª–µ–Ω–∏–µ\n\n"
            "‚ú® –ù–æ–≤–∞—è –æ—Ä–±–∏—Ç–∞–ª—å–Ω–∞—è –∫–∞–º–µ—Ä–∞!\n"
            "–ö–∞–º–µ—Ä–∞ —Ç–µ–ø–µ—Ä—å –≤—Ä–∞—â–∞–µ—Ç—Å—è –≤–æ–∫—Ä—É–≥ —Ü–µ–Ω—Ç—Ä–∞ —Å—Ü–µ–Ω—ã."
        )
        info_text.setWordWrap(True)
        info_text.setStyleSheet("""
            QLabel {
                color: #2c3e50;
                font-size: 12px;
                padding: 10px;
                background-color: #f8f9fa;
                border-radius: 6px;
                border: 1px solid #dee2e6;
            }
        """)
        info_layout.addWidget(info_text)
        
        right_layout.addWidget(info_group)
        right_layout.addStretch()  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ç—è–∂–µ–Ω–∏–µ –≤–Ω–∏–∑—É
        
        main_layout.addWidget(right_panel, 1)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—â–∏—Ö —Å—Ç–∏–ª–µ–π
        self.setStyleSheet("""
            QWidget {
                background-color: #ffffff;
                font-family: 'Segoe UI', Arial, sans-serif;
            }
            QGroupBox {
                font-weight: 600;
                font-size: 14px;
                border: 2px solid #bdc3c7;
                border-radius: 8px;
                margin-top: 15px;
                padding-top: 20px;
                background-color: #f8f9fa;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 15px;
                padding: 5px 15px;
                background-color: #34495e;
                color: white;
                border-radius: 4px;
                font-weight: bold;
            }
            QSlider::groove:horizontal {
                border: none;
                height: 8px;
                background-color: #ecf0f1;
                border-radius: 4px;
            }
            QSlider::handle:horizontal {
                background-color: #3498db;
                border: none;
                width: 20px;
                margin: -6px 0;
                border-radius: 10px;
            }
            QSlider::handle:horizontal:hover {
                background-color: #2980b9;
            }
            QLabel {
                color: #2c3e50;
                font-size: 13px;
            }
        """)

    def get_clean_button_style(self, color):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å—Ç—ã–π —Å—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–æ–∫"""
        return f"""
            QPushButton {{
                background-color: {color};
                color: white;
                font-weight: 600;
                font-size: 13px;
                border: none;
                border-radius: 6px;
                padding: 12px;
                min-height: 25px;
                text-align: center;
            }}
            QPushButton:hover {{
                background-color: {self.darken_color(color)};
            }}
            QPushButton:pressed {{
                background-color: {self.darken_color(color, 0.8)};
            }}
        """

    def darken_color(self, hex_color, factor=0.9):
        """–ó–∞—Ç–µ–º–Ω—è–µ—Ç —Ü–≤–µ—Ç –¥–ª—è hover —ç—Ñ—Ñ–µ–∫—Ç–∞"""
        hex_color = hex_color.lstrip('#')
        rgb = tuple(int(hex_color[i:i+2], 16) for i in (0, 2, 4))
        darkened = tuple(int(c * factor) for c in rgb)
        return f"#{darkened[0]:02x}{darkened[1]:02x}{darkened[2]:02x}"

    def get_current_position(self):
        x = self.pos_x_slider.value() / 100.0
        y = self.pos_y_slider.value() / 100.0
        z = self.pos_z_slider.value() / 100.0
        return x, y, z
    
    def get_current_size(self):
        return self.size_slider.value() / 100.0
    
    def add_cube(self):
        x, y, z = self.get_current_position()
        size = self.get_current_size()
        try:
            renderer3d.AddCube(x, y, z, size)
            self.object_count += 1
            self.update_object_count()
            print(f"‚úÖ –ö—É–± –¥–æ–±–∞–≤–ª–µ–Ω! –ü–æ–∑–∏—Ü–∏—è: ({x:.1f}, {y:.1f}, {z:.1f}), —Ä–∞–∑–º–µ—Ä: {size:.1f}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—É–±–∞: {e}")
    
    def add_random_cube(self):
        x = random.uniform(-5, 5)
        y = random.uniform(-3, 3)
        z = random.uniform(-15, -8)
        size = random.uniform(0.3, 1.5)
        try:
            renderer3d.AddCube(x, y, z, size)
            self.object_count += 1
            self.update_object_count()
            print(f"‚úÖ –°–ª—É—á–∞–π–Ω—ã–π –∫—É–± –¥–æ–±–∞–≤–ª–µ–Ω! –ü–æ–∑–∏—Ü–∏—è: ({x:.1f}, {y:.1f}, {z:.1f}), —Ä–∞–∑–º–µ—Ä: {size:.1f}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫—É–±–∞: {e}")
    
    def add_cube_line(self):
        for i in range(5):
            x = (i - 2) * 1.5
            y = 0
            z = -10
            size = 0.5
            renderer3d.AddCube(x, y, z, size)
            self.object_count += 1
        self.update_object_count()
    
    def add_cube_circle(self):
        radius = 3.0
        num_cubes = 8
        for i in range(num_cubes):
            angle = (i / num_cubes) * 2 * math.pi
            x = math.cos(angle) * radius
            z = math.sin(angle) * radius - 10
            y = 0
            size = 0.4
            renderer3d.AddCube(x, y, z, size)
            self.object_count += 1
        self.update_object_count()
    
    def clear_scene(self):
        if has_clear_scene:
            renderer3d.ClearScene()
            self.object_count = 0
            self.update_object_count()
        else:
            reply = QtWidgets.QMessageBox.question(
                self, '–û—á–∏—Å—Ç–∫–∞ —Å—Ü–µ–Ω—ã', 
                '–û—á–∏—Å—Ç–∏—Ç—å —Å—Ü–µ–Ω—É? (–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ)\n\n'
                '–í —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ DLL –Ω–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –æ—á–∏—Å—Ç–∫–∏.',
                QtWidgets.QMessageBox.StandardButton.Yes | QtWidgets.QMessageBox.StandardButton.No
            )
            if reply == QtWidgets.QMessageBox.StandardButton.Yes:
                QtWidgets.QApplication.quit()
    
    def update_object_count(self):
        if has_object_count:
            try:
                count = renderer3d.GetObjectCount()
                self.object_count_label.setText(f"–û–±—ä–µ–∫—Ç–æ–≤ –≤ —Å—Ü–µ–Ω–µ: {count}")
            except:
                self.object_count_label.setText(f"–û–±—ä–µ–∫—Ç–æ–≤ –≤ —Å—Ü–µ–Ω–µ: {self.object_count}")
        else:
            self.object_count_label.setText(f"–û–±—ä–µ–∫—Ç–æ–≤ –≤ —Å—Ü–µ–Ω–µ: {self.object_count}")
    
    def create_demo_scene(self):
        # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—É—é –¥–µ–º–æ-—Å—Ü–µ–Ω—É
        initial_count = self.object_count
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –±–æ–ª—å—à–æ–π –∫—É–±
        renderer3d.AddCube(0, 0, -12, 1.5)
        self.object_count += 1
        
        # –ú–∞–ª—ã–µ –∫—É–±—ã –≤–æ–∫—Ä—É–≥
        for i in range(4):
            angle = (i / 4) * 2 * math.pi
            x = math.cos(angle) * 3.5
            z = math.sin(angle) * 3.5 - 12
            renderer3d.AddCube(x, 0, z, 0.5)
            self.object_count += 1
        
        # –ë–∞—à–Ω—è –∫—É–±–æ–≤
        for i in range(5):
            renderer3d.AddCube(4, i * 1.2 - 2, -15, 0.6)
            self.object_count += 1
        
        # –°–ª—É—á–∞–π–Ω—ã–µ –∫—É–±—ã
        for _ in range(10):
            x = random.uniform(-8, 8)
            y = random.uniform(-3, 3)
            z = random.uniform(-20, -8)
            size = random.uniform(0.2, 0.8)
            renderer3d.AddCube(x, y, z, size)
            self.object_count += 1
        
        self.update_object_count()

    def reset_camera(self):
        if has_reset_camera:
            try:
                renderer3d.ResetCamera()
                print("üì∑ –ö–∞–º–µ—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞ –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∫–∞–º–µ—Ä—ã: {e}")
        else:
            print("‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è ResetCamera –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ç–µ–∫—É—â–µ–π DLL")

    def open_casino(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–∑–∏–Ω–æ"""
        casino_window = SlotMachineWindow(self)
        casino_window.exec()

class SlotMachineWindow(QtWidgets.QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("üé∞ –ö–∞–∑–∏–Ω–æ 3D –†–µ–Ω–¥–µ—Ä–µ—Ä–∞")
        self.setFixedSize(400, 380)  # –£–≤–µ–ª–∏—á–∏–ª –≤—ã—Å–æ—Ç—É –¥–ª—è –∫–Ω–æ–ø–∫–∏ –±–ª—ç–∫–¥–∂–µ–∫–∞
        self.coins = 100  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–µ—Ç—ã –ü–ï–†–ï–î –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π UI
        
        # –î–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        self.animation_timer = QtCore.QTimer()
        self.animation_timer.timeout.connect(self.animate_reels)
        self.animation_counter = 0
        self.final_result = []
        self.symbols = ["üçí", "üçã", "üçä", "üçá", "üíé", "‚≠ê", "üéØ", "üî•"]
        
        self.init_ui()
        
    def init_ui(self):
        layout = QtWidgets.QVBoxLayout(self)
        layout.setSpacing(10)
        layout.setContentsMargins(15, 15, 15, 15)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QtWidgets.QLabel("üé∞ –°–ª–æ—Ç –ú–∞—à–∏–Ω–∞")
        title.setStyleSheet("""
            QLabel {
                font-size: 18px;
                font-weight: bold;
                color: white;
                background-color: #3498db;
                padding: 10px;
                border-radius: 6px;
                text-align: center;
            }
        """)
        title.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(title)
        
        # –°—á–µ—Ç—á–∏–∫ –º–æ–Ω–µ—Ç
        self.coins_label = QtWidgets.QLabel(f"üí∞ –ú–æ–Ω–µ—Ç—ã: {self.coins}")
        self.coins_label.setStyleSheet("""
            QLabel {
                font-size: 14px;
                font-weight: bold;
                color: white;
                background-color: #27ae60;
                padding: 8px;
                border-radius: 4px;
                text-align: center;
            }
        """)
        self.coins_label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(self.coins_label)
        
        # –ë–∞—Ä–∞–±–∞–Ω—ã - –∫–æ–º–ø–∞–∫—Ç–Ω–æ
        reels_layout = QtWidgets.QHBoxLayout()
        reels_layout.setSpacing(8)
        
        self.reels = []
        
        for i in range(3):
            reel = QtWidgets.QLabel("üé≤")
            reel.setStyleSheet("""
                QLabel {
                    font-size: 32px;
                    background-color: white;
                    border: 2px solid #34495e;
                    border-radius: 6px;
                    padding: 8px;
                    text-align: center;
                    min-width: 60px;
                    max-width: 60px;
                    min-height: 60px;
                    max-height: 60px;
                }
            """)
            reel.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
            self.reels.append(reel)
            reels_layout.addWidget(reel)
        
        layout.addLayout(reels_layout)
        
        # –ö–Ω–æ–ø–∫–∞ –ö–†–£–¢–ò–¢–¨
        self.spin_button = QtWidgets.QPushButton("üé∞ –ö—Ä—É—Ç–∏—Ç—å! (10 –º–æ–Ω–µ—Ç)")
        self.spin_button.clicked.connect(self.spin_reels)
        self.spin_button.setStyleSheet("""
            QPushButton {
                background-color: #e74c3c;
                color: white;
                font-weight: bold;
                font-size: 14px;
                border: none;
                border-radius: 6px;
                padding: 12px;
            }
            QPushButton:hover {
                background-color: #c0392b;
            }
            QPushButton:pressed {
                background-color: #a93226;
            }
        """)
        layout.addWidget(self.spin_button)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç
        self.result_label = QtWidgets.QLabel("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ!")
        self.result_label.setStyleSheet("""
            QLabel {
                font-size: 12px;
                font-weight: bold;
                color: #2c3e50;
                background-color: #ecf0f1;
                padding: 8px;
                border-radius: 4px;
                border: 1px solid #bdc3c7;
                text-align: center;
            }
        """)
        self.result_label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(self.result_label)
        
        # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –±–ª—ç–∫–¥–∂–µ–∫—É
        blackjack_button = QtWidgets.QPushButton("üÉè –ò–≥—Ä–∞—Ç—å –≤ –ë–ª—ç–∫–¥–∂–µ–∫")
        blackjack_button.clicked.connect(self.open_blackjack)
        blackjack_button.setStyleSheet("""
            QPushButton {
                background-color: #8e44ad;
                color: white;
                font-weight: bold;
                font-size: 12px;
                border: none;
                border-radius: 4px;
                padding: 8px;
            }
            QPushButton:hover {
                background-color: #7d3c98;
            }
        """)
        layout.addWidget(blackjack_button)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç—å
        close_button = QtWidgets.QPushButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å")
        close_button.clicked.connect(self.close)
        close_button.setStyleSheet("""
            QPushButton {
                background-color: #95a5a6;
                color: white;
                font-weight: bold;
                font-size: 12px;
                border: none;
                border-radius: 4px;
                padding: 8px;
            }
            QPushButton:hover {
                background-color: #7f8c8d;
            }
        """)
        layout.addWidget(close_button)
        
        # –û–±—â–∏–π —Å—Ç–∏–ª—å –æ–∫–Ω–∞
        self.setStyleSheet("""
            QDialog {
                background-color: #ffffff;
                font-family: 'Segoe UI', Arial, sans-serif;
            }
        """)
    
    def spin_reels(self):
        if self.coins < 10:
            self.result_label.setText("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!")
            self.result_label.setStyleSheet("""
                QLabel {
                    font-size: 12px;
                    font-weight: bold;
                    color: white;
                    background-color: #e74c3c;
                    padding: 8px;
                    border-radius: 4px;
                    text-align: center;
                }
            """)
            return
            
        self.coins -= 10
        self.update_coins_display()
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–æ –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏
        self.spin_button.setEnabled(False)
        self.result_label.setText("üé∞ –ö—Ä—É—Ç–∏–º...")
        self.result_label.setStyleSheet("""
            QLabel {
                font-size: 12px;
                font-weight: bold;
                color: #2c3e50;
                background-color: #f39c12;
                padding: 8px;
                border-radius: 4px;
                text-align: center;
            }
        """)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.final_result = [random.choice(self.symbols) for _ in range(3)]
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        self.animation_counter = 0
        self.animation_timer.start(100)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 100–º—Å
        
    def animate_reels(self):
        """–ê–Ω–∏–º–∞—Ü–∏—è –∫—Ä—É—á–µ–Ω–∏—è –±–∞—Ä–∞–±–∞–Ω–æ–≤"""
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤–æ –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏
        for i, reel in enumerate(self.reels):
            # –ü–µ—Ä–≤—ã–µ 20 –∏—Ç–µ—Ä–∞—Ü–∏–π - –±—ã—Å—Ç—Ä–∞—è —Å–º–µ–Ω–∞ —Å–∏–º–≤–æ–ª–æ–≤
            if self.animation_counter < 20:
                reel.setText(random.choice(self.symbols))
                # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç "–∫—Ä—É—á–µ–Ω–∏—è" - –º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å
                reel.setStyleSheet("""
                    QLabel {
                        font-size: 32px;
                        background-color: #f39c12;
                        border: 3px solid #e67e22;
                        border-radius: 6px;
                        padding: 8px;
                        text-align: center;
                        min-width: 60px;
                        max-width: 60px;
                        min-height: 60px;
                        max-height: 60px;
                    }
                """)
            # –ë–∞—Ä–∞–±–∞–Ω—ã –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –ø–æ –æ—á–µ—Ä–µ–¥–∏
            elif self.animation_counter == 20 + i * 5:
                reel.setText(self.final_result[i])
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π —Å—Ç–∏–ª—å
                reel.setStyleSheet("""
                    QLabel {
                        font-size: 32px;
                        background-color: white;
                        border: 2px solid #27ae60;
                        border-radius: 6px;
                        padding: 8px;
                        text-align: center;
                        min-width: 60px;
                        max-width: 60px;
                        min-height: 60px;
                        max-height: 60px;
                    }
                """)
        
        self.animation_counter += 1
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –≤—Å–µ –±–∞—Ä–∞–±–∞–Ω—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å
        if self.animation_counter >= 35:  # 20 + 3*5 = 35
            self.animation_timer.stop()
            self.finish_spin()
    
    def finish_spin(self):
        """–ó–∞–≤–µ—Ä—à–∞–µ–º —Å–ø–∏–Ω –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∏–≥—Ä—ã—à
        winnings = self.check_winnings(self.final_result)
        self.coins += winnings
        self.update_coins_display()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π —Å—Ç–∏–ª—å –±–∞—Ä–∞–±–∞–Ω–∞–º
        for reel in self.reels:
            reel.setStyleSheet("""
                QLabel {
                    font-size: 32px;
                    background-color: white;
                    border: 2px solid #34495e;
                    border-radius: 6px;
                    padding: 8px;
                    text-align: center;
                    min-width: 60px;
                    max-width: 60px;
                    min-height: 60px;
                    max-height: 60px;
                }
            """)
        
        if winnings > 0:
            self.result_label.setText(f"üéâ –í—ã–∏–≥—Ä–∞–ª–∏ {winnings} –º–æ–Ω–µ—Ç! üéâ")
            self.result_label.setStyleSheet("""
                QLabel {
                    font-size: 12px;
                    font-weight: bold;
                    color: white;
                    background-color: #27ae60;
                    padding: 8px;
                    border-radius: 4px;
                    text-align: center;
                }
            """)
            
            # –ê–Ω–∏–º–∞—Ü–∏—è –≤—ã–∏–≥—Ä—ã—à–∞ - –º–∏–≥–∞–Ω–∏–µ –±–∞—Ä–∞–±–∞–Ω–æ–≤
            QtCore.QTimer.singleShot(500, self.flash_winning_reels)
        else:
            self.result_label.setText("üò¢ –í —ç—Ç–æ—Ç —Ä–∞–∑ –Ω–µ –ø–æ–≤–µ–∑–ª–æ...")
            self.result_label.setStyleSheet("""
                QLabel {
                    font-size: 12px;
                    font-weight: bold;
                    color: #2c3e50;
                    background-color: #ecf0f1;
                    padding: 8px;
                    border-radius: 4px;
                    border: 1px solid #bdc3c7;
                    text-align: center;
                }
            """)
            
        # –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –æ–±—Ä–∞—Ç–Ω–æ
        self.spin_button.setEnabled(True)
    
    def flash_winning_reels(self):
        """–ú–∏–≥–∞–Ω–∏–µ –±–∞—Ä–∞–±–∞–Ω–æ–≤ –ø—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ"""
        for reel in self.reels:
            reel.setStyleSheet("""
                QLabel {
                    font-size: 32px;
                    background-color: #f1c40f;
                    border: 3px solid #f39c12;
                    border-radius: 6px;
                    padding: 8px;
                    text-align: center;
                    min-width: 60px;
                    max-width: 60px;
                    min-height: 60px;
                    max-height: 60px;
                }
            """)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π —Å—Ç–∏–ª—å —á–µ—Ä–µ–∑ –ø–æ–ª—Å–µ–∫—É–Ω–¥—ã
        QtCore.QTimer.singleShot(500, lambda: self.restore_normal_reels())
    
    def restore_normal_reels(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π —Å—Ç–∏–ª—å –±–∞—Ä–∞–±–∞–Ω–∞–º"""
        for reel in self.reels:
            reel.setStyleSheet("""
                QLabel {
                    font-size: 32px;
                    background-color: white;
                    border: 2px solid #34495e;
                    border-radius: 6px;
                    padding: 8px;
                    text-align: center;
                    min-width: 60px;
                    max-width: 60px;
                    min-height: 60px;
                    max-height: 60px;
                }
            """)
        
    def check_winnings(self, result):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏"""
        # –î–∂–µ–∫–ø–æ—Ç - –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
        if result[0] == result[1] == result[2]:
            if result[0] == "üíé":
                return 1000  # –î–∂–µ–∫–ø–æ—Ç –±—Ä–∏–ª–ª–∏–∞–Ω—Ç—ã
            elif result[0] == "‚≠ê":
                return 500   # –ó–≤–µ–∑–¥—ã
            elif result[0] == "üî•":
                return 300   # –û–≥–æ–Ω—å
            else:
                return 100   # –î—Ä—É–≥–∏–µ —Ç—Ä–æ–π–∫–∏
                
        # –ü–∞—Ä–∞ —Å–∏–º–≤–æ–ª–æ–≤
        elif result[0] == result[1] or result[1] == result[2] or result[0] == result[2]:
            if "üíé" in result:
                return 50
            elif "‚≠ê" in result:
                return 30
            else:
                return 20
                
        return 0
        
    def update_coins_display(self):
        self.coins_label.setText(f"üí∞ –ú–æ–Ω–µ—Ç—ã: {self.coins}")
        if self.coins < 10:
            self.coins_label.setStyleSheet("""
                QLabel {
                    font-size: 14px;
                    font-weight: bold;
                    color: white;
                    background-color: #e74c3c;
                    padding: 8px;
                    border-radius: 4px;
                    text-align: center;
                }
            """)
        else:
            self.coins_label.setStyleSheet("""
                QLabel {
                    font-size: 14px;
                    font-weight: bold;
                    color: white;
                    background-color: #27ae60;
                    padding: 8px;
                    border-radius: 4px;
                    text-align: center;
                }
            """)

    def open_blackjack(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∏–≥—Ä—É –≤ –±–ª—ç–∫–¥–∂–µ–∫ —Å —Ç–µ–∫—É—â–∏–º–∏ –º–æ–Ω–µ—Ç–∞–º–∏"""
        blackjack_window = BlackjackWindow(self, self.coins)
        result = blackjack_window.exec()
        if result:
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–Ω–µ—Ç—ã –ø–æ—Å–ª–µ –∏–≥—Ä—ã –≤ –±–ª—ç–∫–¥–∂–µ–∫
            self.coins = blackjack_window.coins
            self.update_coins_display()

class BlackjackWindow(QtWidgets.QDialog):
    def __init__(self, parent=None, coins=100):
        super().__init__(parent)
        self.setWindowTitle("üÉè –ë–ª—ç–∫–¥–∂–µ–∫")
        self.setFixedSize(500, 600)
        self.coins = coins
        self.bet = 0
        self.player_cards = []
        self.dealer_cards = []
        self.game_in_progress = False
        self.dealer_hidden = True
        
        # –ö–æ–ª–æ–¥–∞ –∫–∞—Ä—Ç
        self.deck = self.create_deck()
        random.shuffle(self.deck)
        
        self.init_ui()
        
    def create_deck(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–ª–æ–¥—É –∫–∞—Ä—Ç"""
        suits = ['‚ô†', '‚ô•', '‚ô¶', '‚ô£']
        ranks = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']
        deck = []
        for suit in suits:
            for rank in ranks:
                deck.append(f"{rank}{suit}")
        return deck
        
    def init_ui(self):
        layout = QtWidgets.QVBoxLayout(self)
        layout.setSpacing(10)
        layout.setContentsMargins(15, 15, 15, 15)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QtWidgets.QLabel("üÉè –ë–ª—ç–∫–¥–∂–µ–∫")
        title.setStyleSheet("""
            QLabel {
                font-size: 18px;
                font-weight: bold;
                color: white;
                background-color: #2c3e50;
                padding: 10px;
                border-radius: 6px;
                text-align: center;
            }
        """)
        title.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(title)
        
        # –°—á–µ—Ç—á–∏–∫ –º–æ–Ω–µ—Ç
        self.coins_label = QtWidgets.QLabel(f"üí∞ –ú–æ–Ω–µ—Ç—ã: {self.coins}")
        self.coins_label.setStyleSheet("""
            QLabel {
                font-size: 14px;
                font-weight: bold;
                color: white;
                background-color: #27ae60;
                padding: 8px;
                border-radius: 4px;
                text-align: center;
            }
        """)
        self.coins_label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(self.coins_label)
        
        # –°—Ç–∞–≤–∫–∞
        bet_layout = QtWidgets.QHBoxLayout()
        bet_label = QtWidgets.QLabel("–°—Ç–∞–≤–∫–∞:")
        bet_label.setStyleSheet("font-weight: bold; font-size: 14px;")
        bet_layout.addWidget(bet_label)
        
        self.bet_slider = QtWidgets.QSlider(QtCore.Qt.Orientation.Horizontal)
        self.bet_slider.setRange(10, min(100, self.coins))
        self.bet_slider.setValue(10)
        self.bet_value_label = QtWidgets.QLabel("10")
        self.bet_slider.valueChanged.connect(lambda v: self.bet_value_label.setText(str(v)))
        
        bet_layout.addWidget(self.bet_slider)
        bet_layout.addWidget(self.bet_value_label)
        layout.addLayout(bet_layout)
        
        # –ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞
        dealer_label = QtWidgets.QLabel("üé© –î–∏–ª–µ—Ä:")
        dealer_label.setStyleSheet("font-weight: bold; font-size: 14px; color: #e74c3c;")
        layout.addWidget(dealer_label)
        
        self.dealer_cards_label = QtWidgets.QLabel("üÇ† üÇ†")
        self.dealer_cards_label.setStyleSheet("""
            QLabel {
                font-size: 24px;
                background-color: #2c3e50;
                color: white;
                padding: 10px;
                border-radius: 6px;
                text-align: center;
                min-height: 40px;
            }
        """)
        self.dealer_cards_label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(self.dealer_cards_label)
        
        self.dealer_score_label = QtWidgets.QLabel("–û—á–∫–∏: ?")
        self.dealer_score_label.setStyleSheet("font-weight: bold; text-align: center;")
        self.dealer_score_label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(self.dealer_score_label)
        
        # –ö–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞
        player_label = QtWidgets.QLabel("üë§ –í–∞—à–∏ –∫–∞—Ä—Ç—ã:")
        player_label.setStyleSheet("font-weight: bold; font-size: 14px; color: #3498db;")
        layout.addWidget(player_label)
        
        self.player_cards_label = QtWidgets.QLabel("üÇ† üÇ†")
        self.player_cards_label.setStyleSheet("""
            QLabel {
                font-size: 24px;
                background-color: #3498db;
                color: white;
                padding: 10px;
                border-radius: 6px;
                text-align: center;
                min-height: 40px;
            }
        """)
        self.player_cards_label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(self.player_cards_label)
        
        self.player_score_label = QtWidgets.QLabel("–û—á–∫–∏: 0")
        self.player_score_label.setStyleSheet("font-weight: bold; text-align: center;")
        self.player_score_label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(self.player_score_label)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π
        game_buttons_layout = QtWidgets.QHBoxLayout()
        
        self.start_button = QtWidgets.QPushButton("üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É")
        self.start_button.clicked.connect(self.start_game)
        self.start_button.setStyleSheet("""
            QPushButton {
                background-color: #27ae60;
                color: white;
                font-weight: bold;
                font-size: 12px;
                border: none;
                border-radius: 4px;
                padding: 10px;
            }
            QPushButton:hover {
                background-color: #229954;
            }
        """)
        game_buttons_layout.addWidget(self.start_button)
        
        self.hit_button = QtWidgets.QPushButton("üÉè –ï—â–µ –∫–∞—Ä—Ç—É")
        self.hit_button.clicked.connect(self.hit)
        self.hit_button.setEnabled(False)
        self.hit_button.setStyleSheet("""
            QPushButton {
                background-color: #f39c12;
                color: white;
                font-weight: bold;
                font-size: 12px;
                border: none;
                border-radius: 4px;
                padding: 10px;
            }
            QPushButton:hover {
                background-color: #e67e22;
            }
            QPushButton:disabled {
                background-color: #bdc3c7;
            }
        """)
        game_buttons_layout.addWidget(self.hit_button)
        
        self.stand_button = QtWidgets.QPushButton("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è")
        self.stand_button.clicked.connect(self.stand)
        self.stand_button.setEnabled(False)
        self.stand_button.setStyleSheet("""
            QPushButton {
                background-color: #e74c3c;
                color: white;
                font-weight: bold;
                font-size: 12px;
                border: none;
                border-radius: 4px;
                padding: 10px;
            }
            QPushButton:hover {
                background-color: #c0392b;
            }
            QPushButton:disabled {
                background-color: #bdc3c7;
            }
        """)
        game_buttons_layout.addWidget(self.stand_button)
        
        layout.addLayout(game_buttons_layout)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã
        self.result_label = QtWidgets.QLabel("–°–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É –∏ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É!")
        self.result_label.setStyleSheet("""
            QLabel {
                font-size: 14px;
                font-weight: bold;
                color: #2c3e50;
                background-color: #ecf0f1;
                padding: 10px;
                border-radius: 6px;
                border: 1px solid #bdc3c7;
                text-align: center;
            }
        """)
        self.result_label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(self.result_label)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç—å
        close_button = QtWidgets.QPushButton("‚ùå –ù–∞–∑–∞–¥ –∫ —Å–ª–æ—Ç–∞–º")
        close_button.clicked.connect(self.accept)
        close_button.setStyleSheet("""
            QPushButton {
                background-color: #95a5a6;
                color: white;
                font-weight: bold;
                font-size: 12px;
                border: none;
                border-radius: 4px;
                padding: 8px;
            }
            QPushButton:hover {
                background-color: #7f8c8d;
            }
        """)
        layout.addWidget(close_button)
        
        # –û–±—â–∏–π —Å—Ç–∏–ª—å –æ–∫–Ω–∞
        self.setStyleSheet("""
            QDialog {
                background-color: #ffffff;
                font-family: 'Segoe UI', Arial, sans-serif;
            }
        """)
        
    def start_game(self):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É"""
        if self.coins < 10:
            self.result_label.setText("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –∏–≥—Ä—ã!")
            return
            
        self.bet = self.bet_slider.value()
        if self.bet > self.coins:
            self.result_label.setText("‚ùå –°—Ç–∞–≤–∫–∞ –±–æ–ª—å—à–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–Ω–µ—Ç!")
            return
            
        self.coins -= self.bet
        self.update_coins_display()
        
        # –°–±—Ä–æ—Å –∏–≥—Ä—ã
        self.player_cards = []
        self.dealer_cards = []
        self.game_in_progress = True
        self.dealer_hidden = True
        
        # –†–∞–∑–¥–∞—á–∞ –∫–∞—Ä—Ç
        self.player_cards.append(self.deal_card())
        self.dealer_cards.append(self.deal_card())
        self.player_cards.append(self.deal_card())
        self.dealer_cards.append(self.deal_card())
        
        self.update_display()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª—ç–∫–¥–∂–µ–∫
        if self.calculate_score(self.player_cards) == 21:
            self.dealer_hidden = False
            self.update_display()
            if self.calculate_score(self.dealer_cards) == 21:
                self.end_game("üü° –ù–∏—á—å—è! –ë–ª—ç–∫–¥–∂–µ–∫ —É –æ–±–æ–∏—Ö!", self.bet)
            else:
                self.end_game("üéâ –ë–õ–≠–ö–î–ñ–ï–ö! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!", int(self.bet * 2.5))
            return
            
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
        self.start_button.setEnabled(False)
        self.hit_button.setEnabled(True)
        self.stand_button.setEnabled(True)
        
        self.result_label.setText(f"üí∞ –°—Ç–∞–≤–∫–∞: {self.bet} –º–æ–Ω–µ—Ç. –í–∞—à —Ö–æ–¥!")
        
    def deal_card(self):
        """–†–∞–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã"""
        if len(self.deck) < 10:
            self.deck = self.create_deck()
            random.shuffle(self.deck)
        return self.deck.pop()
        
    def calculate_score(self, cards):
        """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ—á–∫–∏ —Ä—É–∫–∏"""
        score = 0
        aces = 0
        
        for card in cards:
            rank = card[:-1]  # –£–±–∏—Ä–∞–µ–º –º–∞—Å—Ç—å
            if rank in ['J', 'Q', 'K']:
                score += 10
            elif rank == 'A':
                aces += 1
                score += 11
            else:
                score += int(rank)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—É–∑–æ–≤
        while score > 21 and aces > 0:
            score -= 10
            aces -= 1
            
        return score
        
    def update_display(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç –∏ –æ—á–∫–æ–≤"""
        # –ö–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞
        player_display = " ".join(self.player_cards)
        self.player_cards_label.setText(player_display)
        player_score = self.calculate_score(self.player_cards)
        self.player_score_label.setText(f"–û—á–∫–∏: {player_score}")
        
        # –ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞
        if self.dealer_hidden and len(self.dealer_cards) > 0:
            dealer_display = f"üÇ† {self.dealer_cards[1] if len(self.dealer_cards) > 1 else ''}"
            self.dealer_score_label.setText("–û—á–∫–∏: ?")
        else:
            dealer_display = " ".join(self.dealer_cards)
            dealer_score = self.calculate_score(self.dealer_cards)
            self.dealer_score_label.setText(f"–û—á–∫–∏: {dealer_score}")
            
        self.dealer_cards_label.setText(dealer_display)
        
    def hit(self):
        """–ò–≥—Ä–æ–∫ –±–µ—Ä–µ—Ç –µ—â–µ –∫–∞—Ä—Ç—É"""
        self.player_cards.append(self.deal_card())
        self.update_display()
        
        player_score = self.calculate_score(self.player_cards)
        if player_score > 21:
            self.end_game("üí• –ü–µ—Ä–µ–±–æ—Ä! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!", 0)
        elif player_score == 21:
            self.stand()  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –ø—Ä–∏ 21
            
    def stand(self):
        """–ò–≥—Ä–æ–∫ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è, —Ö–æ–¥ –¥–∏–ª–µ—Ä–∞"""
        self.dealer_hidden = False
        self.hit_button.setEnabled(False)
        self.stand_button.setEnabled(False)
        
        # –î–∏–ª–µ—Ä –¥–æ–±–∏—Ä–∞–µ—Ç –∫–∞—Ä—Ç—ã
        while self.calculate_score(self.dealer_cards) < 17:
            self.dealer_cards.append(self.deal_card())
            
        self.update_display()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        player_score = self.calculate_score(self.player_cards)
        dealer_score = self.calculate_score(self.dealer_cards)
        
        if dealer_score > 21:
            self.end_game("üéâ –î–∏–ª–µ—Ä –ø–µ—Ä–µ–±—Ä–∞–ª! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!", self.bet * 2)
        elif dealer_score > player_score:
            self.end_game("üòû –î–∏–ª–µ—Ä –≤—ã–∏–≥—Ä–∞–ª!", 0)
        elif player_score > dealer_score:
            self.end_game("üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!", self.bet * 2)
        else:
            self.end_game("üü° –ù–∏—á—å—è!", self.bet)
            
    def end_game(self, message, winnings):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∏–≥—Ä—É"""
        self.game_in_progress = False
        self.coins += winnings
        self.update_coins_display()
        
        self.result_label.setText(message)
        if winnings > 0:
            self.result_label.setStyleSheet("""
                QLabel {
                    font-size: 14px;
                    font-weight: bold;
                    color: white;
                    background-color: #27ae60;
                    padding: 10px;
                    border-radius: 6px;
                    text-align: center;
                }
            """)
        else:
            self.result_label.setStyleSheet("""
                QLabel {
                    font-size: 14px;
                    font-weight: bold;
                    color: white;
                    background-color: #e74c3c;
                    padding: 10px;
                    border-radius: 6px;
                    text-align: center;
                }
            """)
            
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –Ω–æ–≤–æ–π –∏–≥—Ä—ã
        self.start_button.setEnabled(True)
        self.hit_button.setEnabled(False)
        self.stand_button.setEnabled(False)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–∞–π–¥–µ—Ä —Å—Ç–∞–≤–æ–∫
        self.bet_slider.setMaximum(min(100, self.coins))
        
    def update_coins_display(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–æ–Ω–µ—Ç"""
        self.coins_label.setText(f"üí∞ –ú–æ–Ω–µ—Ç—ã: {self.coins}")
        if self.coins < 10:
            self.coins_label.setStyleSheet("""
                QLabel {
                    font-size: 14px;
                    font-weight: bold;
                    color: white;
                    background-color: #e74c3c;
                    padding: 8px;
                    border-radius: 4px;
                    text-align: center;
                }
            """)
        else:
            self.coins_label.setStyleSheet("""
                QLabel {
                    font-size: 14px;
                    font-weight: bold;
                    color: white;
                    background-color: #27ae60;
                    padding: 8px;
                    border-radius: 4px;
                    text-align: center;
                }
            """)

class MainWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("üéÆ 3D –†–µ–Ω–¥–µ—Ä–µ—Ä v2.0 - –ï–¥–∏–Ω–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        self.setMinimumSize(1200, 800)
        self.setFixedSize(1200, 800)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–¥–∏–Ω—É—é –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–∫ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        self.control_panel = MainControlPanel()
        self.setCentralWidget(self.control_panel)
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_bar = self.statusBar()
        status_msg = "üöÄ 3D –†–µ–Ω–¥–µ—Ä–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! "
        if not has_camera_controls:
            status_msg += "‚ö†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–º–µ—Ä–æ–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ "
        if not (has_background_color and has_object_count and has_reset_camera):
            status_msg += "‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
        self.status_bar.showMessage(status_msg)
        
        # –ú–µ–Ω—é
        self.create_menu()
    
    def create_menu(self):
        menubar = self.menuBar()
        
        # –§–∞–π–ª
        file_menu = menubar.addMenu('üìÅ –§–∞–π–ª')
        
        exit_action = QtGui.QAction('üö™ –í—ã—Ö–æ–¥', self)
        exit_action.triggered.connect(self.close)
        file_menu.addAction(exit_action)
        
        # –ü–æ–º–æ—â—å
        help_menu = menubar.addMenu('‚ùì –ü–æ–º–æ—â—å')
        
        about_action = QtGui.QAction('‚ÑπÔ∏è –û –ø—Ä–æ–≥—Ä–∞–º–º–µ', self)
        about_action.triggered.connect(self.show_about)
        help_menu.addAction(about_action)
        
        # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        tools_menu = menubar.addMenu('üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã')
        
        if not (has_background_color and has_object_count and has_reset_camera):
            compile_action = QtGui.QAction('‚öôÔ∏è –ü–µ—Ä–µ–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å DLL', self)
            compile_action.triggered.connect(self.show_compile_info)
            tools_menu.addAction(compile_action)
    
    def show_about(self):
        QtWidgets.QMessageBox.about(
            self,
            "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ",
            "üéÆ 3D –†–µ–Ω–¥–µ—Ä–µ—Ä v2.0\n\n"
            "–ï–¥–∏–Ω–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è!\n"
            "–í—Å—ë –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ!\n\n"
            "–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:\n"
            f"‚Ä¢ {'‚úÖ' if has_camera_controls else '‚ùå'} –ò–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–º–µ—Ä–æ–π\n"
            "‚Ä¢ ‚úÖ –ë–æ–ª—å—à–∏–µ —É–¥–æ–±–Ω—ã–µ –∫–Ω–æ–ø–∫–∏\n"
            "‚Ä¢ ‚úÖ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—ä–µ–∫—Ç–æ–≤\n"
            "‚Ä¢ ‚úÖ 3D –æ–±–ª–∞—Å—Ç—å –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –æ–¥–Ω–æ–º –æ–∫–Ω–µ\n"
            f"‚Ä¢ {'‚úÖ' if (has_background_color and has_object_count and has_reset_camera) else '‚ùå'} –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏\n\n"
            "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: C++, OpenGL, SDL2, PyQt6"
        )
    
    def show_compile_info(self):
        QtWidgets.QMessageBox.information(
            self,
            "–ö–æ–º–ø–∏–ª—è—Ü–∏—è DLL",
            "üîß –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n\n"
            "1. –û—Ç–∫—Ä—ã—Ç—å Visual Studio\n"
            "2. –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –∏–∑ main/src/renderer3d/\n"
            "3. –°–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç\n"
            "4. –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é DLL –≤ –ø–∞–ø–∫—É test/\n\n"
            "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—Å–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏\n"
            "–±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã!"
        )

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    app.setStyle('Fusion')  # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å
    
    window = MainWindow()
    window.show()
    
    sys.exit(app.exec()) 